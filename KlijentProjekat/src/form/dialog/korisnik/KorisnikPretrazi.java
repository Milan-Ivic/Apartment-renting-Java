/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form.dialog.korisnik;

import components.TableModelKorisnik;
import domen.Adresa;
import domen.Korisnik;
import domen.Stan;
import domen.Ugovor;
import form.GlavnaForma;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class KorisnikPretrazi extends javax.swing.JDialog {

    ArrayList<Korisnik> korisnici;
    /**
     * Creates new form KorisnikPretrazi
     */
    public KorisnikPretrazi(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        txtKorisnik.setModel(new TableModelKorisnik());
        popuniTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtKorisnik = new javax.swing.JTable();
        txtIme = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnPrikaziSveKorisnike = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        btnPretraziPoVrednosti = new javax.swing.JButton();
        btnIzmeniKorisnika = new javax.swing.JButton();
        btnPrikaziDetalje = new javax.swing.JButton();
        btnObrisiKorisnika = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Forma za pretragu korisnika");

        txtKorisnik.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(txtKorisnik);

        jLabel1.setText("Ime:");

        jLabel2.setText("Pretrazi korisnike");

        btnPrikaziSveKorisnike.setText("Prikazi sve korisnike");
        btnPrikaziSveKorisnike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziSveKorisnikeActionPerformed(evt);
            }
        });

        jLabel3.setText("Prezime:");

        btnPretraziPoVrednosti.setText("Pretrazi po vrednosti");
        btnPretraziPoVrednosti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziPoVrednostiActionPerformed(evt);
            }
        });

        btnIzmeniKorisnika.setText("Izmeni korisnika");
        btnIzmeniKorisnika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniKorisnikaActionPerformed(evt);
            }
        });

        btnPrikaziDetalje.setText("Prikazi detaljno");
        btnPrikaziDetalje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziDetaljeActionPerformed(evt);
            }
        });

        btnObrisiKorisnika.setText("Obrisi korisnika");
        btnObrisiKorisnika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiKorisnikaActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(278, 278, 278)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPrezime, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(txtIme))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnPrikaziDetalje)
                                            .addGap(40, 40, 40)
                                            .addComponent(btnPretraziPoVrednosti)
                                            .addGap(62, 62, 62)
                                            .addComponent(btnPrikaziSveKorisnike)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnOtkazi)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnIzmeniKorisnika)
                                        .addGap(95, 95, 95)
                                        .addComponent(btnObrisiKorisnika)))
                                .addGap(0, 155, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPretraziPoVrednosti)
                    .addComponent(btnPrikaziDetalje)
                    .addComponent(btnPrikaziSveKorisnike))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnObrisiKorisnika)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnOtkazi)
                        .addComponent(btnIzmeniKorisnika)))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIzmeniKorisnikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniKorisnikaActionPerformed
        // TODO add your handling code here:
        int selectedRow = txtKorisnik.getSelectedRow();
        
        if(selectedRow >= 0){
        
            JOptionPane.showMessageDialog(this, "Sistem je ucitao korisnika.");
            TableModelKorisnik tmk = (TableModelKorisnik) txtKorisnik.getModel();
            Korisnik kor = tmk.vratiKorisnika(selectedRow);
            GlavnaForma gf = (GlavnaForma) getParent();
            KorisnikIzmena ki = new KorisnikIzmena(gf, false);
            ki.izmeni(kor);
            ki.setVisible(true);
            
        }else{
        
            JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita korisnika. Niste izabrali korisnika.");
        }
    }//GEN-LAST:event_btnIzmeniKorisnikaActionPerformed

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnOtkaziActionPerformed

    private void btnPretraziPoVrednostiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziPoVrednostiActionPerformed
        // TODO add your handling code here:
        String ime = txtIme.getText();
        String prezime = txtPrezime.getText();
        ArrayList<Korisnik> novaLista = new ArrayList<>();
        for (Korisnik korisnik : korisnici) {
            if(!txtIme.getText().isEmpty() && !txtPrezime.getText().isEmpty()){
            if(korisnik.getIme().equals(ime) && korisnik.getPrezime().equals(prezime)){
            
                novaLista.add(korisnik);
            }
            }else if(txtIme.getText().isEmpty() && txtPrezime.getText().isEmpty()){
            
                JOptionPane.showMessageDialog(this, "Niste uneli vrednosti po kojima se pretrazuje.");
                return;
            }else if(!txtIme.getText().isEmpty() && txtPrezime.getText().isEmpty()){
            
                if(korisnik.getIme().equals(ime) ){
            
                novaLista.add(korisnik);
            }else if(txtIme.getText().isEmpty() && !txtPrezime.getText().isEmpty()){
            
                if(korisnik.getPrezime().equals(prezime)){
            
                novaLista.add(korisnik);
            }
            }
        }
        }
        if(novaLista.isEmpty()){
        
            JOptionPane.showMessageDialog(this, "Sistem nije uspeo naci korisnike po zadatoj vrednosti.");
        }else{
        
            JOptionPane.showMessageDialog(this, "Sistem je pronasao korisnike po zadatoj vrednosti.");
            TableModelKorisnik tmk = (TableModelKorisnik) txtKorisnik.getModel();
            tmk.dodajListu(novaLista);
        }
    }//GEN-LAST:event_btnPretraziPoVrednostiActionPerformed

    private void btnPrikaziSveKorisnikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziSveKorisnikeActionPerformed
        // TODO add your handling code here:
        popuniTabelu();
    }//GEN-LAST:event_btnPrikaziSveKorisnikeActionPerformed

    private void btnPrikaziDetaljeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziDetaljeActionPerformed
        // TODO add your handling code here:
        int selectedRow = txtKorisnik.getSelectedRow();
        
        if(selectedRow >= 0){
        
            try {
                JOptionPane.showMessageDialog(this, "Sistem je ucitao korisnika.");
                TableModelKorisnik tmk = (TableModelKorisnik) txtKorisnik.getModel();
                Korisnik kor = tmk.vratiKorisnika(selectedRow);
                
                ArrayList<Ugovor> ugovori = controller.Communication.getInstance().getAllUgovor();
                ArrayList<Adresa> adreseSve = controller.Communication.getInstance().getAllAdrese();
                ArrayList<Adresa> adreseZaKorisnika = new ArrayList<>();
                ArrayList<Stan> stanovi = new ArrayList<>();
                
                for (Ugovor ugovor : ugovori) {
                    if(ugovor.getKorisnik().getKorisnikID()==kor.getKorisnikID()){
                    
                        stanovi.add(ugovor.getStan());
                    }
                }
                for(Stan stan: stanovi){
                
                    for(Adresa adre: adreseSve){
                    
                        if(stan.getStanID()==adre.getStan().getStanID()){
                        
                            adreseZaKorisnika.add(adre);
                        }
                    }
                }
                
                GlavnaForma gf = (GlavnaForma) getParent();
                KorisnikIzmena ki = new KorisnikIzmena(gf, false);
                ki.postaviFormu(kor, adreseZaKorisnika);
                ki.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(KorisnikPretrazi.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else{
        
            JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita korisnika. Niste izabrali korisnika.");
        }
    }//GEN-LAST:event_btnPrikaziDetaljeActionPerformed

    private void btnObrisiKorisnikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiKorisnikaActionPerformed
        // TODO add your handling code here:
        int selectedRow = txtKorisnik.getSelectedRow();
        
        if(selectedRow >= 0){
        
            try {
                JOptionPane.showMessageDialog(this, "Sistem je ucitao korisnika.");
                TableModelKorisnik tmk = (TableModelKorisnik) txtKorisnik.getModel();
                Korisnik kor = tmk.vratiKorisnika(selectedRow);
                
                Object obrisano = controller.Communication.getInstance().deleteKorisnik(kor);
                
                if(!(boolean)obrisano){
                    
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da orbise korisnika.");
                }else{
                
                    tmk.obrisiKorisnika(selectedRow);
                    JOptionPane.showMessageDialog(this, "Sistem je obrisao korisnika.");
                }
            } catch (IOException ex) {
                Logger.getLogger(KorisnikPretrazi.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else{
        
            JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita korisnika. Niste izabrali korisnika.");
        }
    }//GEN-LAST:event_btnObrisiKorisnikaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KorisnikPretrazi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KorisnikPretrazi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KorisnikPretrazi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KorisnikPretrazi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                KorisnikPretrazi dialog = new KorisnikPretrazi(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeniKorisnika;
    private javax.swing.JButton btnObrisiKorisnika;
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnPretraziPoVrednosti;
    private javax.swing.JButton btnPrikaziDetalje;
    private javax.swing.JButton btnPrikaziSveKorisnike;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTable txtKorisnik;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private void popuniTabelu() {
        try {
            korisnici = controller.Communication.getInstance().getAllKorisnik();
            TableModelKorisnik tmk = (TableModelKorisnik) txtKorisnik.getModel();
            tmk.dodajListu(korisnici);
        } catch (IOException ex) {
            Logger.getLogger(KorisnikPretrazi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
